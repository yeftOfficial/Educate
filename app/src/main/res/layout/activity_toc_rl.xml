<?xml version="1.0" encoding="utf-8"?>
<ScrollView xmlns:android="http://schemas.android.com/apk/res/android"
    xmlns:app="http://schemas.android.com/apk/res-auto"
    xmlns:tools="http://schemas.android.com/tools"
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:layout_margin="8dp"
    tools:context=".TOC_rl">

    <LinearLayout
        android:layout_width="match_parent"
        android:orientation="vertical"
        android:layout_height="wrap_content">

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Regular Language"
            android:textAlignment="center"
            android:layout_margin="8dp"
            android:textSize="20sp"
            android:textStyle="bold"
            android:textColor="@color/colorHeading"
            android:gravity="center_horizontal" />

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Regular Language"
            android:layout_marginTop="10dp"
            android:textColor="@color/colorSubHeading"
            android:textSize="16sp"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@drawable/bordertextview"
            android:padding="12dp"
            android:text="Regular languages are most restricted type of languages and are accepted by finite automata."/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Closure Property of Regular language"
            android:layout_marginTop="10dp"
            android:textColor="@color/colorSubHeading"
            android:textSize="16sp"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@drawable/bordertextview"
            android:padding="12dp"
            android:text="Closure properties on regular languages are defined as certain operations on regular language which generate or produce regular language.\n\n
•	Kleen Closure\n
R1* is kleen closure and is regular.\n\n
•	Positive Closure\n
R1^+ is positive closure which means R1*-є .\n\n
•	Complement\n
Regular language is closed under complementation.\n\n
•	Reverse Operator\n
A family of regular languages is closed under reversal. \n\n
•	Concatenation\n
R1.R2 is also regular.\n\n
•	Union\n
A family of regular languages is closed under union. R1 Ս R2 is also regular.\n\n
•	Intersection\n
R1 ∩ R2 is also regular.\n\n
•	Set difference\n
R1-R2 is regular as R1-R2 = R1 ∩ R2’
•	Homomorphism\n
It is a substitution in which a single letter is replaced with a string. If R is a regular language then h(R) is also regular.\n\n
•	Inverse Homomorphism\n
Regular languages are closed under inverse homomorphism, i.e., if L is regular and h is a homomorphism then h−1(L) is regular.

"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Regular Expression"
            android:layout_marginTop="10dp"
            android:textColor="@color/colorSubHeading"
            android:textSize="16sp"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@drawable/bordertextview"
            android:padding="12dp"
            android:text="Regular languages can be described via notation of regular expression. This notation involves a combination of parenthesis,+ ,.,* and strings of symbols. For every regular language there is a regular expression and vice versa. For example,\n
(a+b+c)*.(a+b)
"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Rules for Regular expression"
            android:layout_marginTop="10dp"
            android:textColor="@color/colorSubHeading"
            android:textSize="16sp"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@drawable/bordertextview"
            android:padding="12dp"
            android:text="•	If r1 and r2 are regular expressions, then\n
a)	L(r1+r2) = L(r1) ᴗ L(r2)\n
b)	L(r1.r2) = L(r1)L(r2)\n
c)	L((r1)) = L(r1)\n
d)	L(r1*) = (L(r1))*\n
"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Regular Grammar"
            android:layout_marginTop="10dp"
            android:textColor="@color/colorSubHeading"
            android:textSize="16sp"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@drawable/bordertextview"
            android:padding="12dp"
            android:text="Grammars are often an alternative way of specifying languages. Third way of describing regular languages is by regular grammar."/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Right and Left Linear Grammar"
            android:layout_marginTop="10dp"
            android:textColor="@color/colorSubHeading"
            android:textSize="16sp"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@drawable/bordertextview"
            android:padding="12dp"
            android:text="A grammar G = (V,T,S,P) is said to be right-linear if all productions are of the form,\n
A → xB\n
A → x\n
\n
A grammar is said to be left-linear if all productions are of the form,\n
A→Bx\nA→x\n
A regular grammar is either right linear or left linear. A linear grammar is a grammar in which at most one variable can occur on the right side of any production, without restriction on the position of this variable.\n
A language L is regular if and only if there exists a regular grammar G such that L = L(G)
"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:text="Identifying Non-Regular Language"
            android:layout_marginTop="10dp"
            android:textColor="@color/colorSubHeading"
            android:textSize="16sp"/>

        <TextView
            android:layout_width="match_parent"
            android:layout_height="wrap_content"
            android:background="@drawable/bordertextview"
            android:padding="12dp"
            android:text="•	Using Pigeonhole Principle\n
It means that if we put n objects into m boxes (pigeonholes) and n>m, then at least one box has more than one items in it.\n\n
•	Pumping Lemma\nAlready discussed.
"/>

    </LinearLayout>
</ScrollView>